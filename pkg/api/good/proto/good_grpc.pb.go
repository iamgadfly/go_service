// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/good.proto

package good

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodClient is the client API for Good service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*GoodResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*GoodResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type goodClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodClient(cc grpc.ClientConnInterface) GoodClient {
	return &goodClient{cc}
}

func (c *goodClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*GoodResponse, error) {
	out := new(GoodResponse)
	err := c.cc.Invoke(ctx, "/good.Good/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*GoodResponse, error) {
	out := new(GoodResponse)
	err := c.cc.Invoke(ctx, "/good.Good/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/good.Good/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/good.Good/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodServer is the server API for Good service.
// All implementations must embed UnimplementedGoodServer
// for forward compatibility
type GoodServer interface {
	Create(context.Context, *CreateRequest) (*GoodResponse, error)
	Update(context.Context, *UpdateRequest) (*GoodResponse, error)
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedGoodServer()
}

// UnimplementedGoodServer must be embedded to have forward compatible implementations.
type UnimplementedGoodServer struct {
}

func (UnimplementedGoodServer) Create(context.Context, *CreateRequest) (*GoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGoodServer) Update(context.Context, *UpdateRequest) (*GoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGoodServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedGoodServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGoodServer) mustEmbedUnimplementedGoodServer() {}

// UnsafeGoodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodServer will
// result in compilation errors.
type UnsafeGoodServer interface {
	mustEmbedUnimplementedGoodServer()
}

func RegisterGoodServer(s grpc.ServiceRegistrar, srv GoodServer) {
	s.RegisterService(&Good_ServiceDesc, srv)
}

func _Good_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.Good/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.Good/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.Good/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.Good/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Good_ServiceDesc is the grpc.ServiceDesc for Good service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Good_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.Good",
	HandlerType: (*GoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Good_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Good_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Good_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Good_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/good.proto",
}
